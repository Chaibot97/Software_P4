	The IMP Programming Language
	& its assertion language


Here follows the description of the minimal programming language
you will be using for your symbolic execution engine.  Since
annotations need to be parts of the language (for preconditions and assertions),
the logic language is also described.

The language description is given in traditional BNF style.  In the BNF
syntax specification, keywords are written between double quotes (like
"while" or "+").  The letter x stands for any variable.  Variables are
sequences of letters, digits and _ that start with a letter.  The letter n
stands for any decimal number.  A BNF description between brackets (like
[ STMT ]) denotes arbitrary repetitions of the bracketed contents.  So,
[ "no" ] will match both the empty string "", and "no no no".

As in the lecture notes, I did not make a great job at separating program
and logical variables.  The identifier set that we use to represent
variables is the same for both program and logic variables.


1. EXPRESSIONS

We start the language description with arithmetic expressions.

AEXP := n | x
     | x "[" AEXP "]"
     | "-" AEXP
     | AEXP "+" AEXP
     | AEXP "-" AEXP
     | AEXP "*" AEXP
     | AEXP "/" AEXP
     | AEXP "%" AEXP
     | "(" AEXP ")"

Programs can make use of arrays, arrays and regular variables live in
different namespaces, this means that 'a' and 'a[0]' are not related.
In the first expression we denote the value of a regular integer
variable, while in the second expression we denote 0th element of an
array.

Notice that there is no way to get the length of an array.  This is for
the sake of simplicity, we assume arrays to be infinite (in both
directions).  That is, 'a[-10]' and 'a[10]' always exist and, except if
specified by a precondition, their value is initially undefined (like
with regular variables).

The precedence of multiplicative operators is, as usual in mathematics,
higher than the one of additive operators.  This means that the arithmetic
expression '3+4%x' is to be interpreted as '3+(4%x)'.  The associativity
of operators does not matter since we are working with infinite precision
integers.

Program conditions will use boolean expressions, we will find condition
in on while loops, and if statements.

COMP := AEXP "=" AEXP
     | AEXP "!=" AEXP
     | AEXP "<=" AEXP
     | AEXP ">=" AEXP
     | AEXP "<" AEXP
     | AEXP ">" AEXP

BEXP := COMP
     | "!" BEXP
     | BEXP "||" BEXP
     | BEXP "&&" BEXP
     | "(" BEXP ")"

The precedences of different boolean operators are described in the
following table.

  higher | ( )
         | !
         | &&
  lower  | ||


2. STATEMENTS

Like in any traditional imperative language, statements of the IMP
language can be chained together to form blocks that will be executed
in sequence.

BLOCK := [ STMT ]

Logical assertions are
noted ASSN in the following statement definition and will be defined in
the next session.

STMT := x ":=" AEXP ";"
     | x, y := AEXP "," AEXP ";" 
     | x "[" AEXP "]" ":=" AEXP ";"
     | "if" BEXP "then" BLOCK "else" BLOCK "end"
     | "if" BEXP "then" BLOCK "end"
     | "while" BEXP "do" BLOCK "end"
     | "assert" ASSN

Because of the syntactic way we treat arrays, the statement 'a := b;'
cannot be used to copy an array.  However, it is possible to copy a
slice of array using a loop and assignments of the form 'a[i] := b[i];'

The second form of if statements is a special case of the first one
where the else part is an empty block.

Assert statements check that the given assertion is true, at the time th
assertion is executed in the program.

A complete program is a block that is given a name.  A program
can have a set of preconditions.  It also has a
whitespace separated list of 0 or more input variables,
specified in parenthesis after the name.
Arrays as input variables are specified by the array name, followed by "[]"

VAR := x | x "[]"
PROG := "program" x "(" [VAR] ")" [ "pre" ASSN ] "is" BLOCK "end"


3. ASSERTIONS

Logical assertions are very similar to boolean expressions except that
they provide first order quantifiers (quantifiers introducing variables
to represent integers).

ASSN := COMP
     | "!" ASSN
     | ASSN "||" ASSN
     | ASSN "&&" ASSN
     | ASSN "==>" ASSN
     | "forall" [ x ] "," ASSN
     | "exists" [ x ] "," ASSN
     | "(" ASSN ")"

The precedences of different operators are described in the
following table.

  higher | ( )
         | !
         | &&
         | ||
         | ==>
         | forall
  lower  | exists
